---
- hosts: dm-host
  # connection: local
  gather_facts: false

  vars:
    swarm_present: no
    swarm_absent: yes

    num_of_managers: 1
    num_of_workers: 2
      # name: swarm-manager-
      # group: "managers"
      # size: 1
    # workers:
    #   - name: swarm-worker-
    #     group: "workers"
    #     size: 3
 
  pre_tasks:
    - name: Create dynamic list of manager nodes.
      set_fact:
        manager_nodes: "{{ manager_nodes | default([]) | union(['swarm-manager-%02x' | format(item)]) }}"
      loop: "{{ range(0, (num_of_managers), 1)|list }}"

    - name: Create dynamic list of worker nodes.
      set_fact:
        worker_nodes: "{{ worker_nodes | default([]) | union(['swarm-worker-%02x' | format(item)]) }}"
      loop: "{{ range(0, (num_of_workers), 1)|list }}"

  tasks:
    - name: Check current nodes running in docker-machine.
      command: docker-machine ls --format {{ "{{'.'Name}}" }}
      register: dm_virtual_machines
      when: swarm_present

    # - debug:
    #     var: dm_virtual_machines

    - set_fact:
        nodes_not_active: "{{ (manager_nodes + worker_nodes) | difference(dm_virtual_machines.stdout_lines) }}"
      when: swarm_present

    # - debug:
    #     var: nodes_not_active

    - name: Provision docker-machine swarm nodes not currently active.
      command: docker-machine create -d kvm --kvm-nic-type virtio {{ item }}
      loop: "{{ nodes_not_active }}"
      when: swarm_present

    - name: Remove (destroy) all docker-machine swarm nodes.
      command: docker-machine rm -y {{ item }}
      loop: "{{ manager_nodes + worker_nodes }}"
      when: swarm_absent

    - name: Acquire list of active nodes in docker-machine at end of provisioning or removal.
      command: docker-machine ls
      register: dm_summary

    - debug:
        var: dm_summary.stdout_lines


# ORIGINAL DO PROVISIONING
#       digital_ocean:
#         state: "{{ item.state | default('present') }}"
#         command: droplet
#         name: "{{ item.name }}"
#         private_networking: yes
#         size_id: "{{ item.size | default('s-1vcpu-1gb') }}"
#         image_id: "{{ item.image | default('centos-7-x64') }}"
#         region_id: "{{ item.region | default('nyc3') }}"
#         # Customize this default for your account.
#         ssh_key_ids: "{{ item.ssh_key | default('138954') }}"
#         unique_name: yes
#       register: created_droplets
#       with_items: "{{ droplets }}"

#     - name: Add DigitalOcean hosts to inventory groups.
#       add_host:
#         name: "{{ item.1.droplet.ip_address }}"
#         groups: "do,{{ droplets[item.0].group }},{{ item.1.droplet.name }}"
#         # You can dynamically add inventory variables per-host.
#         ansible_ssh_user: root
#         mysql_replication_role: >
#           "{{ 'master' if (item.1.droplet.name == 'a4d.lamp.db.1')
#           else 'slave' }}"
#         mysql_server_id: "{{ item.0 }}"
#       when: item.1.droplet is defined
#       with_indexed_items: "{{ created_droplets.results }}"

# - hosts: do
#   remote_user: root
#   gather_facts: false

#   tasks:
#     - name: Wait for port 22 to become available.
#       local_action: "wait_for port=22 host={{ inventory_hostname }}"
